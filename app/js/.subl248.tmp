// Here we create an Angular service that we will use for our 
// model. In your controllers (or other services) you can include the
// dependency on any service you need. Angular will insure that the
// service is created first time it is needed and then just reuse it
// the next time.
dinnerPlannerApp.factory('Dinner',function ($resource) {

	var numberOfGuests = 2;
	var menu = [];
	var pendingPrice = 0;


	this.setNumberOfGuests = function(num) {
		numberOfGuests = num;
	}

	this.getNumberOfGuests = function() {
		return numberOfGuests;
	}

	this.setPendingPrice = function(value) {
		pendingPrice = value;
	}

	this.getPendingPrice = function() {
		return pendingPrice;
	}

	//Returns the dish that is on the menu for selected type 
	this.getSelectedDish = function(type) {
		return this.getDish(this.menu[type]);
	}

	//Returns all the dishes on the menu.
	this.getFullMenu = function() {
		fullMenu = [];

		for (var key in this.menu) {
			fullMenu.push(this.menu[key]);
		}

		return fullMenu;
	}

	//Returns all ingredients for all the dishes on the menu.
	this.getAllIngredients = function() {
		var ingredients = [];

		if (this.menu == null) {
			return;
		}

		for (var key in this.menu) {
			dish = this.menu[key];
			for (var j in dish["Ingredients"]) {
				ingredients.push(dish["Ingredients"][j]);
			}
		}

		return ingredients;
	}

	//Returns the total price of the menu (all the ingredients multiplied by number of guests).
	this.getTotalMenuPrice = function() {
		ingredients = this.getAllIngredients();
		var price = 0;
		for (var i in ingredients) {
			price += ingredients[i]["Quantity"];
		}
		return price;
	}

	this.getDishPrice = function(dish) {
		var price = 0.0;

		//var dish = this.getDish(id);

		for (i in dish["Ingredients"]) {
			price += dish["Ingredients"][i]["Quantity"];
		}

		return price;
	}

	//Adds the passed dish to the menu. If the dish of that type already exists on the menu
	//it is removed from the menu and the new one added.
	this.addDishToMenu = function(dish) {
		// dish = this.getDish(id);
		this.menu.push(dish);
		notifyObject = {"description" : "newMenuDish"};
		this.notifyObservers(notifyObject);
	}

	//Removes dish from menu
	this.removeDishFromMenu = function(id) {
		for (var key in this.menu) {
			if (this.menu[key]["RecipeID"] == id) {
				delete this.menu[key];
			}
		}
		this.notifyObservers();
	}

	//function that returns all dishes of specific type (i.e. "starter", "main dish" or "dessert")
	//you can use the filter argument to filter out the dish by name or ingredient (use for search)
	//if you don't pass any filter all the dishes will be returned
	this.getAllDishes = function (type, filter) {
		var apiKey = "dvx9EUS7d1Pr8xN1Hua1iC9Qc9zn1niL";
		var url = "http://api.bigoven.com/recipes?api_key=" + apiKey + "&pg=1&rpp=20" + "&any_kw=" + type + " " + filter;
		model = this;
		$.ajax({
			type: "GET",
			dataType: 'json',
			cache: false,
			url: url,
			success: function (data) {
				// this.notifyObservers(data);
				eventObject = {"description" : "dishes", "data": data};
				model.notifyObservers(eventObject);
			},
			error: function(xhr, status, error) {
				model.networkError(xhr, status, error);
			}
		});
	}

	//function that returns a dish of specific ID
	this.getDish = function (id) {
		// for(key in dishes){
		// 	if(dishes[key].id == id) {
		// 		return dishes[key];
		// 	}
		// }
		var apiKey = "dvx9EUS7d1Pr8xN1Hua1iC9Qc9zn1niL";
		var url = "http://api.bigoven.com/recipe/" + id + "?api_key=" + apiKey;
		model = this;
		$.ajax({
			type: "GET",
			dataType: 'json',
			cache: false,
			url: url,
			success: function (data) {
				eventObject = {"description": "dish", "data" : data};
				// this.notifyObservers(data);
				model.notifyObservers(eventObject);
			},
			error: function(xhr, status, error) {
				model.networkError(xhr, status, error);
			}
		});
	}

	this.networkError = function(xhr, status, error) {
		eventObject = {"description" : "networkError", "data": [xhr, status, error]};
		this.notifyObservers(eventObject);
	}


	// TODO in Lab 5: Add your model code from previous labs
	// feel free to remove above example code
	// you will need to modify the model (getDish and getAllDishes) 
	// a bit to take the advantage of Angular resource service
	// check lab 5 instructions for details





	// Angular service needs to return an object that has all the
	// methods created in it. You can consider that this is instead
	// of calling var model = new DinnerModel() we did in the previous labs
	// This is because Angular takes care of creating it when needed.
	return this;

});